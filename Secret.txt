# PROYECTO STANDAR - Contexto Completo Actualizado
# Fecha: Enero 2025
# Repositorio: github.com/JOGLDEVELOPER96/Standar
# Última actualización: Sistema de Toast y Modales implementado

## 📋 INFORMACIÓN GENERAL DEL PROYECTO

**Nombre:** ZGROUP - LinkControl
**Repositorio:** github.com/JOGLDEVELOPER96/Standar
**Tecnologías:** Next.js 15, TypeScript, Tailwind CSS, Lucide Icons, Framer Motion, bcryptjs
**Arquitectura:** Modular con máximo 200 líneas por archivo
**Patrón:** Componentes reutilizables con hooks personalizados
**Alias de importación:** `$/*` (personalizado, NO `@/*`)

## 🌐 CONFIGURACIÓN DE APIs Y ENDPOINTS

### API Principal
- **URL:** `http://161.132.206.104:9010`
- **Variable:** `NEXT_PUBLIC_API_URL`
- **Endpoints:**
  - `/usuarios/extraerPass/{username}` - Obtener contraseña hasheada
  - `/usuarios/{username}` - Obtener datos del usuario
  - `/Contenedor/listar` - Listar contenedores

### API Control Automático
- **URL:** `http://161.132.53.51:9050`
- **Variable:** `NEXT_PUBLIC_APICONTROL_URL`
- **Endpoints:**
  - `/Control/listar` - Listar controles automáticos
  - `/Control/crear` - Crear nuevo control (único/cíclico/periódico)
  - `/Control/actualizar` - Actualizar control existente
  - `/Control/eliminar` - Eliminar control

### Configuración .env.local

Copy

Apply

NEXT_PUBLIC_API_URL=http://161.132.206.104:9010 NEXT_PUBLIC_APICONTROL_URL=http://161.132.53.51:9050 NEXT_PUBLIC_DEBUG=true


## 🏗️ ESTRUCTURA COMPLETA DEL PROYECTO


Copy

Apply

src/ ├── app/ │ ├── globals.css # Estilos globales con Tailwind │ ├── layout.tsx # Layout raíz con ThemeProvider, SidebarProvider, ToastProvider │ ├── page.tsx # Página principal con redirección automática │ ├── login/ │ │ └── page.tsx # Página de login (importa LoginForm) │ ├── dashboard/ │ │ ├── layout.tsx # Layout con DashboardLayout │ │ └── page.tsx # Importa DashboardMain │ └── control-automatico/ │ └── page.tsx # Importa ControlAutomaticoMain ├── components/ │ ├── layout/ │ │ ├── DashboardLayout.tsx # Layout principal con sidebar/header/footer │ │ └── Sidebar.tsx # Navegación lateral con animaciones Framer Motion │ ├── ui/ │ │ ├── Tooltip.tsx # Tooltip con portal y animaciones │ │ ├── Toast.tsx # ✅ NUEVO: Sistema de notificaciones │ │ ├── ConfirmModal.tsx # ✅ NUEVO: Modal de confirmación │ │ └── SaveModal.tsx # ✅ NUEVO: Modal de guardado │ ├── dashboard/ │ │ ├── DashboardMain.tsx # Componente principal dashboard │ │ ├── DashboardHeader.tsx # Header del dashboard │ │ ├── DashboardStats.tsx # Estadísticas en tiempo real │ │ ├── ContainerCarousel.tsx # Carrusel de contenedores │ │ ├── ContainerNavigation.tsx # Navegación entre contenedores │ │ └── ContainerImage.tsx # Imagen interactiva con zoom y pan │ ├── control-automatico/ │ │ ├── ControlAutomaticoMain.tsx # Componente principal │ │ ├── ControlAutomaticoHeader.tsx # Header con selector de tipo │ │ ├── ControlFormularios.tsx # Contenedor de formularios │ │ ├── ControlTablaActivos.tsx # Tabla de controles activos │ │ ├── ControlTablaHistorico.tsx # Tabla de histórico │ │ └── formularios-control/ # ✅ NUEVO: Carpeta de formularios │ │ ├── FormularioUnico.tsx # ✅ IMPLEMENTADO: Formulario control único │ │ ├── FormularioCiclico.tsx # ✅ IMPLEMENTADO: Formulario control cíclico │ │ └── FormularioPeriodico.tsx # ✅ IMPLEMENTADO: Formulario control periódico │ └── login/ │ └── LoginForm.tsx # Formulario de autenticación con validación ├── contexts/ │ ├── ThemeContext.tsx # Contexto de tema (dark/light/system) │ ├── SidebarContext.tsx # Contexto del sidebar (collapsed/mobile) │ └── ToastContext.tsx # ✅ NUEVO: Contexto de notificaciones ├── hooks/ │ ├── useAuth.ts # Hook de autenticación con bcrypt │ ├── useContainers.ts # Hook para API de contenedores │ ├── useControlAutomatico.ts # Hook para API de control automático │ ├── useControlFormularios.ts # ✅ NUEVO: Hook para formularios de control │ └── useModals.ts # ✅ NUEVO: Hook para manejo de modales ├── lib/ │ ├── crypto.ts # Funciones de encriptación (DEPRECADAS) │ └── secure-storage.ts # Almacenamiento seguro en sessionStorage ├── types/ │ ├── auth.ts # Tipos de autenticación y usuario │ ├── container.ts # Tipos de contenedores │ ├── navigation.ts # Tipos de navegación del sidebar │ └── control.ts # ✅ NUEVO: Tipos para control automático └── config/ └── navigation.ts # Configuración del menú del sidebar


## 🔐 SISTEMA DE AUTENTICACIÓN IMPLEMENTADO

### Flujo de Autenticación Completo
1. **Usuario ingresa credenciales** en LoginForm
2. **Extracción de contraseña hasheada:** `GET /usuarios/extraerPass/{username}`
3. **Obtención de datos del usuario:** `GET /usuarios/{username}`
4. **Comparación con bcrypt:** `bcrypt.compare(password, hashedPassword)`
5. **Verificación de estado:** Usuario debe estar activo (`estado: 1`)
6. **Almacenamiento seguro:** Datos en sessionStorage encriptados
7. **Redirección automática** a dashboard

### Estructura de Datos de Usuario
```typescript
interface UserData {
  id: number;
  username: string;
  email: string;
  nombres: string;
  apellidos: string;
  permiso: number;
  empresa_id: number;
}

Copy

Apply

Hook useAuth - Estados y Funciones
// Estados disponibles
{
  user: UserData | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

// Funciones disponibles
login(username: string, password: string): Promise<{success: boolean, error?: string}>
logout(): void

Copy

Apply

🎨 SISTEMA DE TEMAS IMPLEMENTADO
ThemeContext - Funcionalidades
interface ThemeContextType {
  theme: 'light' | 'dark' | 'system';
  setTheme: (theme: Theme) => void;
  isDark: boolean;
  systemTheme: 'light' | 'dark';
}

Copy

Apply

Características del Sistema de Temas
Temas disponibles: light, dark, system
Detección automática: Preferencia del sistema operativo
Persistencia: localStorage para recordar preferencia
Aplicación: Clases CSS dinámicas en elemento
Transiciones: Suaves entre cambios de tema
🔔 SISTEMA DE NOTIFICACIONES IMPLEMENTADO ✅ NUEVO
ToastContext - Funcionalidades
interface ToastContextType {
  showToast: (toast: Omit<ToastData, "id">) => void;
  showSuccess: (title: string, message?: string) => void;
  showError: (title: string, message?: string) => void;
  showWarning: (title: string, message?: string) => void;
  showInfo: (title: string, message?: string) => void;
  removeToast: (id: string) => void;
  clearAllToasts: () => void;
}

Copy

Apply

Características del Sistema de Toast
Tipos: success, error, warning, info
Auto-close: Duración configurable (5s por defecto)
Interactivo: Pausa al hover, botón cerrar
Z-index: z-[9999] - Aparece encima de todo
Animaciones: Entrada/salida suaves con Framer Motion
Progress bar: Indicador visual del tiempo restante
Acciones: Botones de acción opcionales
🪟 SISTEMA DE MODALES IMPLEMENTADO ✅ NUEVO
useModals Hook - Funcionalidades
interface ModalsContextType {
  // Confirm Modal
  isConfirmOpen: boolean;
  confirmData: ConfirmData | null;
  showConfirm: (data: ConfirmData) => void;
  hideConfirm: () => void;
  
  // Save Modal
  isSaveOpen: boolean;
  saveData: SaveData | null;
  showSave: (data: SaveData) => void;
  hideSave: () => void;
  
  // Loading states
  isConfirmLoading: boolean;
  isSaveLoading: boolean;
  setConfirmLoading: (loading: boolean) => void;
  setSaveLoading: (loading: boolean) => void;
}

Copy

Apply

Tipos de Modales
ConfirmModal: Confirmaciones de eliminación, cancelación
SaveModal: Confirmaciones de guardado, creación
Tipos: danger, warning, info, create, update, delete
Z-index: z-[100] - Por debajo de toasts
🧭 SISTEMA DE NAVEGACIÓN AVANZADO
SidebarContext - Estados
interface SidebarContextType {
  isCollapsed: boolean;
  isMobileOpen: boolean;
  toggleSidebar: () => void;
  setMobileOpen: (open: boolean) => void;
}

Copy

Apply

Configuración de Navegación (navigation.ts)
export const navigationConfig: NavigationGroup[] = [
  {
    id: "main",
    label: "Principal",
    items: [
      { id: "dashboard", label: "Dashboard", href: "/dashboard", icon: LayoutDashboard }
    ]
  },
  {
    id: "control",
    label: "Control",
    items: [
      { id: "manual-control", label: "Manual Control", href: "/manual-control", icon: Settings },
      { id: "cycle-control", label: "Cycle Control", href: "/cycle-control", icon: RotateCcw },
      { id: "control-automatico", label: "Control Automático", href: "/control-automatico", icon: Zap }
    ]
  },
  {
    id: "data",
    label: "Datos",
    items: [
      { id: "graph", label: "Graph", href: "/graph", icon: BarChart3 },
      { id: "data", label: "Data", href: "/data", icon: Database }
    ]
  }
];

Copy

Apply

📊 MODELO DE DATOS PRINCIPAL
Interface Container (Contenedores)
interface Container {
  id: number;
  nombre_contenedor: string;
  tipo: string;                    // "reefer", "dry", "tank"
  estado: number;
  power_state: number;             // 0 = OFF, 1 = ON
  alarm_present: number;           // 0 = Sin alarma, 1 = Con alarma
  stateProcess: string;
  timerOfProcess: number;
  
  // Temperaturas
  temp_supply_1: number;
  temp_supply_2: number;
  return_air: number;
  set_point: number;
  
  // Humedad
  relative_humidity: number;
  humidity_control: number;
  humidity_set_point: number;
  
  // Gases
  co2_reading: number;
  o2_reading: number;
  set_point_o2: number;
  set_point_co2: number;
  
  // Ubicación
  latitud: number;
  longitud: number;
  
  // ... más de 60 campos de telemetría total
}

Copy

Apply

Interface ControlTemperatura ✅ ACTUALIZADO
interface ControlTemperatura {
  imei_control_temperatura: string;
  proceso_control_temperatura: string;
  tipo_control_temperatura: number;     // 0=Único, 1=Cíclico, 2=Periódico
  total_control_temperatura: number;
  condicion_control_temperatura: number; // 1=En proceso, 0=Completado
  estado_control_temperatura: number;    // 0=Inactivo, 1=Activo
  fecha_inicio?: string;
  fecha_fin?: string;
  temperatura_objetivo?: number;
  humedad_objetivo?: number;
}

Copy

Apply

Nuevos Tipos para Formularios ✅ NUEVO
// Control Único
interface ControlUnico {
  nombreProceso: string;
  temperatura: string;
  humedad: string;
  duracion: string;
}

// Control Cíclico
interface EtapaCiclica {
  id: string;
  nombreEtapa: string;
  temperatura: string;
  humedad: string;
  duracion: string;
}

interface ControlCiclico {
  nombreProceso: string;
  ciclos: string;
  etapas: EtapaCiclica[];
}

// Control Periódico
interface EtapaPeriodica {
  id: string;
  nombreEtapa: string;
  temperatura: string;
  humedad: string;
  duracion: string;
}

interface ControlPeriodico {
  nombreProceso: string;
  horasProceso: string;
  fechaHoraInicio: string;
  etapas: EtapaPeriodica[];
}

Copy

Apply

🎯 FUNCIONALIDADES COMPLETAMENTE IMPLEMENTADAS
✅ Sistema de Autenticación Completo
Login seguro con bcrypt y validación de contraseñas hasheadas
Almacenamiento encriptado en sessionStorage con claves aleatorias
Redirección automática según estado de autenticación
Manejo robusto de

Copy

Apply


continua desde donde lo dejaste 



Context
— none
### ✅ Sistema de Autenticación Completo
- Login seguro con bcrypt y validación de contraseñas hasheadas
- Almacenamiento encriptado en sessionStorage con claves aleatorias
- Redirección automática según estado de autenticación
- Manejo robusto de errores y estados de carga
- Logout completo con limpieza de todos los datos
- Verificación de sesión al cargar la aplicación

### ✅ Dashboard Funcional
- Vista principal con estadísticas en tiempo real
- Carrusel de contenedores con navegación fluida
- Imagen interactiva con zoom (scroll) y pan (drag)
- Indicadores de estado (power, alarmas, procesos)
- Auto-actualización cada 30 segundos (pausable)
- Navegación por contenedores con miniaturas
- Responsive design completo para todos los dispositivos

### ✅ Control Automático (Base Estructural)
- Hook personalizado para API de control automático
- Tabla de controles activos con estados en tiempo real
- Tabla de histórico de procesos completados
- Selector de tipo de control (Único/Cíclico/Periódico)
- Indicadores de progreso y estados visuales
- Layout responsive con sidebar compartido

### ✅ Formularios de Control Automático ✅ NUEVO
- **FormularioUnico:** Control de temperatura simple con duración fija
- **FormularioCiclico:** Control con múltiples etapas que se repiten por ciclos
- **FormularioPeriodico:** Control con etapas que se ejecutan por tiempo total
- **Validaciones:** Campos requeridos, rangos válidos, fechas futuras
- **Estados de carga:** Botones deshabilitados durante operaciones
- **Confirmaciones:** Modales para crear, cancelar, eliminar etapas

### ✅ Sistema de Navegación Completo
- Sidebar dinámico con configuración centralizada
- Grupos de navegación organizados por funcionalidad
- Iconos Lucide consistentes en toda la aplicación
- Estados activos y efectos hover
- Animaciones fluidas con Framer Motion
- Tooltips inteligentes con portal rendering
- Responsive completo (desktop/móvil)

### ✅ Sistema de Temas Avanzado
- Dark/Light mode con detección automática del sistema
- Tema del sistema como opción predeterminada
- Persistencia en localStorage
- Transiciones suaves entre cambios de tema
- Aplicación global en toda la aplicación

### ✅ Sistema de Notificaciones (Toast) ✅ NUEVO
- Notificaciones de éxito, error, advertencia e información
- Auto-close con duración configurable
- Pausa al hover, reanuda al salir
- Progress bar visual del tiempo restante
- Z-index máximo para aparecer encima de todo
- Animaciones suaves de entrada y salida
- Botones de acción opcionales

### ✅ Sistema de Modales ✅ NUEVO
- Modal de confirmación para acciones críticas
- Modal de guardado para crear/actualizar
- Estados de carga independientes
- Prevención de pérdida de datos
- Backdrop clickeable configurable
- Animaciones con Framer Motion

## 🔄 PATRONES DE DESARROLLO ESTABLECIDOS

### Patrón de Estructura de Componentes
```typescript
// 1. page.tsx - Solo importa el componente Main
import ComponentMain from "$/components/feature/ComponentMain";
export default function Page() {
  return <ComponentMain />;
}

// 2. ComponentMain.tsx - Lógica, estado y coordinación
"use client";
import { useState } from "react";
import { useCustomHook } from "$/hooks/useCustomHook";
import SubComponent1 from "./SubComponent1";
import SubComponent2 from "./SubComponent2";

export default function ComponentMain() {
  // Máximo 200 líneas
  // Lógica, estado, hooks
  return (
    <div>
      <SubComponent1 />
      <SubComponent2 />
    </div>
  );
}

// 3. SubComponents - Componentes presentacionales específicos

Copy

Apply

Patrón de Hooks Personalizados
export function useCustomHook(params) {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      const response = await fetch(endpoint);
      const result = await response.json();
      setData(result);
      setLastUpdate(new Date());
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [params]);

  const refetch = useCallback(async () => {
    setIsRefreshing(true);
    await fetchData();
    setIsRefreshing(false);
  }, [fetchData]);

  return { data, loading, error, isRefreshing, refetch, lastUpdate };
}

Copy

Apply

Patrón de Formularios con Validación ✅ NUEVO
export function useFormularioControl() {
  const [formData, setFormData] = useState(initialState);
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const { showSuccess, showError } = useToast();
  const { showConfirm, showSave } = useModals();

  const validateForm = useCallback(() => {
    const newErrors = {};
    // Validaciones específicas
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  const handleSubmit = useCallback(async () => {
    if (!validateForm()) {
      showError("Formulario inválido", "Corrige los errores antes de continuar");
      return;
    }

    showSave({
      title: "Confirmar creación",
      message: "¿Estás seguro de crear este control?",
      onConfirm: async () => {
        try {
          setIsLoading(true);
          await createControl(formData);
          showSuccess("Control creado", "El control se ha creado exitosamente");
        } catch (error) {
          showError("Error al crear", error.message);
        } finally {
          setIsLoading(false);
        }
      }
    });
  }, [formData, validateForm]);

  return { formData, setFormData, errors, isLoading, handleSubmit };
}

Copy

Apply

Optimizaciones y Memoización
React.memo() para componentes que no cambian frecuentemente
useCallback() para funciones que se pasan como props
useMemo() para cálculos costosos
Portal rendering para tooltips y modales
AnimatePresence para animaciones de entrada/salida
📦 DEPENDENCIAS Y CONFIGURACIÓN
Package.json - Dependencias Principales
{
  "dependencies": {
    "next": "15.1.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "typescript": "^5.0.0",
    "tailwindcss": "^3.4.1",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.468.0",
    "bcryptjs": "^2.4.3"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@types/bcryptjs": "^2.4.6",
    "eslint": "^8.0.0",
    "eslint-config-next": "15.1.3",
    "postcss": "^8.0.0",
    "autoprefixer": "^10.0.0"
  }
}

Copy

Apply

Configuración TypeScript (tsconfig.json)
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{ "name": "next" }],
    "baseUrl": ".",
    "paths": {
      "$/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

Copy

Apply

Configuración Tailwind CSS
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  darkMode: 'class',
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-geist-sans)'],
        mono: ['var(--font-geist-mono)'],
      },
    },
  },
  plugins: [],
}

Copy

Apply

🚀 PRÓXIMAS IMPLEMENTACIONES PLANIFICADAS
🔄 Reorganización de Layout (Prioridad Alta)
app/
├── (protected)/           # Grupo de rutas protegidas
│   ├── layout.tsx         # DashboardLayout compartido
│   ├── dashboard/page.tsx
│   ├── control-automatico/page.tsx
│   ├── manual-control/page.tsx
│   ├── cycle-control/page.tsx
│   ├── graph/page.tsx
│   └── data/page.tsx
├── (auth)/               # Grupo de rutas públicas
│   └── login/page.tsx
└── layout.tsx            # Layout raíz

Copy

Apply

📊 Páginas Pendientes (Prioridad Media)
Manual Control: Control manual directo de contenedores
Cycle Control: Gestión avanzada de ciclos automáticos
Graph: Visualización de datos en gráficos interactivos
Data: Tablas de datos históricos, filtros y reportes
🔐 Middleware de Autenticación (Prioridad Media)
Protección de rutas: Verificación automática de sesión
Redirección inteligente: Según permisos de usuario
Refresh de tokens: Manejo automático de expiración
Roles y permisos: Diferentes niveles de acceso
📱 Mejoras UX/UI (Prioridad Baja)
Filtros avanzados: Filtrado y búsqueda en tablas
Exportación: Exportar datos a Excel/PDF
PWA: Configuración como Progressive Web App
Drag & Drop: Para reordenar etapas en formularios
🛠️ HERRAMIENTAS Y CONVENCIONES
Herramientas de Desarrollo
TypeScript: Tipado estricto en todo el proyecto
ESLint: Linting automático con reglas de Next.js
Prettier: Formateo automático de código
Tailwind CSS: Utility-first CSS framework
Framer Motion: Animaciones y transiciones
Lucide React: Iconografía consistente
Convenciones de Código Establecidas
Nombres: camelCase para variables, PascalCase para componentes
Imports: Alias $/* para src, imports organizados por tipo
Tipos: Interfaces explícitas para todos los datos de API
Comentarios: JSDoc para funciones complejas
Archivos: Máximo 200 líneas por archivo
Componentes: Un componente por archivo
Estructura de Commits
feat: Nueva funcionalidad
fix: Corrección de errores
refactor: Refactorización de código
style: Cambios de estilo/formato
docs: Documentación
test: Pruebas
🔍 DETALLES TÉCNICOS IMPORTANTES
Manejo de Estados
Loading states: Skeletons y spinners consistentes
Error states: Mensajes de error con opciones de retry
Empty states: Mensajes informativos cuando no hay datos
Success states: Confirmaciones visuales de acciones exitosas
Responsive Design
Mobile first: Diseño desde móvil hacia desktop
Breakpoints: sm (640px), md (768px), lg (1024px), xl (1280px)
Grid responsive: Adaptación automática de columnas
Navegación móvil: Sidebar colapsable con overlay
Performance y Optimización
Imágenes Next.js: Optimización automática con componente Image
Lazy loading: Carga diferida de componentes pesados
Code splitting: Separación automática de código por rutas
Memoización: useCallback y useMemo donde corresponde
Debouncing: En búsquedas y filtros para evitar llamadas excesivas
Seguridad Implementada
Encriptación de datos: sessionStorage con claves aleatorias
Validación de entrada: Sanitización de datos de formularios
Headers de seguridad: Configuración en next.config.js
HTTPS: Forzado en producción
Tokens seguros: Manejo seguro de tokens de autenticación
Jerarquía de Z-Index ✅ NUEVO
/* Jerarquía establecida */
/* Sidebar: z-40 */
/* Tooltips: z-50 */
/* Modales: z-[100] */
/* Toasts: z-[9999] - Máximo nivel */

Copy

Apply

📈 MÉTRICAS Y MONITOREO
Métricas de Performance
First Contentful Paint (FCP): < 1.5s
Largest Contentful Paint (LCP): < 2.5s
Cumulative Layout Shift (CLS): < 0.1
First Input Delay (FID): < 100ms
Monitoreo de Errores
Error boundaries: Captura de errores de React
Logging: Console.error para errores críticos
Fallbacks: Componentes de respaldo para errores
🎯 OBJETIVOS DEL PROYECTO
Funcionales
Monitoreo en tiempo real de contenedores refrigerados
Control automático de temperatura y condiciones ambientales
Visualización de datos históricos y actuales
Gestión de alarmas y notificaciones críticas
Reportes y exportación de datos para análisis
Técnicos
Escalabilidad: Arquitectura modular y reutilizable
Performance: Carga rápida

Copy

Apply


continua



Context
— none
### Técnicos
- **Escalabilidad:** Arquitectura modular y reutilizable
- **Performance:** Carga rápida y actualizaciones eficientes
- **Mantenibilidad:** Código limpio y bien documentado
- **Usabilidad:** Interfaz intuitiva y responsive
- **Confiabilidad:** Manejo robusto de errores y estados

### De Negocio
- **Eficiencia operativa:** Reducir tiempo de gestión manual
- **Visibilidad:** Dashboard centralizado para toma de decisiones
- **Automatización:** Procesos automáticos de control
- **Escalabilidad:** Soporte para crecimiento futuro
- **ROI:** Retorno de inversión medible

## 🔧 CONFIGURACIÓN DE DESARROLLO

### Scripts de Package.json
```json
{
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  }
}

Copy

Apply

Variables de Entorno Requeridas
# .env.local
NEXT_PUBLIC_API_URL=http://161.132.206.104:9010
NEXT_PUBLIC_APICONTROL_URL=http://161.132.53.51:9050

# Opcional para desarrollo
NEXT_PUBLIC_DEBUG=true

Copy

Execute

Comandos de Desarrollo
# Instalación
pnpm install

# Desarrollo con Turbopack
pnpm dev

# Build de producción
pnpm build

# Verificación de tipos
pnpm type-check

# Linting
pnpm lint

Copy

Execute

📚 DOCUMENTACIÓN DE APIS
Estructura de Request para Contenedores
// POST /Contenedor/listar
{
  "id_usuario": number,
  "tipo_usuario": number
}

Copy

Apply

Estructura de Response para Contenedores
{
  "data": Container[],
  "code": number,
  "message": string
}

Copy

Apply

Estructura de Request para Control Automático
// POST /Control/listar
{
  "id_usuario": number,
  "tipo_usuario": number
}

// POST /Control/crear
{
  "id_usuario": number,
  "tipo_usuario": number,
  "imei_control_temperatura": string,
  "proceso_control_temperatura": string,
  "tipo_control_temperatura": number,
  "configuracion": {
    // Configuración específica según tipo
  }
}

Copy

Apply

Estructura de Response para Control Automático
{
  "data": ControlTemperatura[],
  "code": number,
  "message": string
}

Copy

Apply

🚨 PROBLEMAS CONOCIDOS Y SOLUCIONES
Problemas Resueltos ✅
Hidratación de temas: Solucionado con suppressHydrationWarning
Encriptación deprecada: Migrado de crypto.ts a bcryptjs
Redirección infinita: Solucionado con isLoading en useAuth
Portal rendering: Implementado correctamente para tooltips
Toast click-through: Solucionado con stopPropagation y pointer-events
Modal backdrop: Configurado correctamente con z-index
Limitaciones Actuales
Sin middleware implementado: Rutas no protegidas automáticamente
Sin manejo de refresh tokens: Sesión expira con sessionStorage
Sin tests unitarios: Pendiente implementar testing
Sin PWA: Pendiente configuración de service worker
Bugs Conocidos
Ninguno crítico identificado actualmente
📋 CHECKLIST DE ESTADO ACTUAL
✅ Completado
Sistema de autenticación con bcrypt
Dashboard funcional con datos reales
Sistema de temas (dark/light/system)
Navegación con sidebar animado
Responsive design completo
Almacenamiento seguro de datos
Hooks personalizados para APIs
Componentes reutilizables
Configuración de TypeScript
Configuración de Tailwind CSS
Sistema de notificaciones (Toast)
Sistema de modales (Confirm/Save)
Formularios de control automático
Validaciones de formularios
Manejo de estados de carga
Animaciones con Framer Motion
🔄 En Progreso
Integración con APIs de control (pendiente endpoints)
Middleware de autenticación
Reorganización con route groups
Optimizaciones de performance
⏳ Pendiente
Página de gráficos (Graph)
Página de datos (Data)
Página de control manual
Página de control cíclico
Sistema de exportación
Tests unitarios
Configuración PWA
Documentación de usuario
🔄 FLUJOS DE TRABAJO IMPLEMENTADOS
Flujo de Autenticación
1. Usuario accede a la aplicación
2. Verificación de sesión activa
3. Si no hay sesión → Redirect a /login
4. Usuario ingresa credenciales
5. Validación con API (bcrypt)
6. Almacenamiento seguro de datos
7. Redirect a /dashboard

Copy

Apply

Flujo de Control Automático
1. Usuario accede a /control-automatico
2. Carga de controles activos e histórico
3. Selección de tipo de control
4. Llenado de formulario correspondiente
5. Validación de datos
6. Confirmación con modal
7. Envío a API
8. Notificación de resultado
9. Actualización de tablas

Copy

Apply

Flujo de Notificaciones
1. Acción del usuario (crear, editar, eliminar)
2. Validación de datos
3. Confirmación con modal (si es necesario)
4. Ejecución de acción
5. Notificación toast según resultado
6. Actualización de UI

Copy

Apply

🎨 GUÍA DE ESTILOS ESTABLECIDA
Colores del Sistema
/* Tema Light */
--background: 0 0% 100%;
--foreground: 222.2 84% 4.9%;
--primary: 222.2 47.4% 11.2%;
--secondary: 210 40% 96%;

/* Tema Dark */
--background: 222.2 84% 4.9%;
--foreground: 210 40% 98%;
--primary: 210 40% 98%;
--secondary: 217.2 32.6% 17.5%;

Copy

Apply

Tipografía
/* Fuentes principales */
font-family: 'Geist Sans', sans-serif;
font-family: 'Geist Mono', monospace;

/* Tamaños establecidos */
text-xs: 0.75rem;    /* 12px */
text-sm: 0.875rem;   /* 14px */
text-base: 1rem;     /* 16px */
text-lg: 1.125rem;   /* 18px */
text-xl: 1.25rem;    /* 20px */

Copy

Apply

Espaciado Consistente
/* Espaciado interno */
p-2: 0.5rem;   /* 8px */
p-4: 1rem;     /* 16px */
p-6: 1.5rem;   /* 24px */
p-8: 2rem;     /* 32px */

/* Espaciado entre elementos */
space-y-2: 0.5rem;
space-y-4: 1rem;
space-y-6: 1.5rem;

Copy

Apply

Animaciones Estándar
/* Transiciones */
transition-colors: 150ms;
transition-transform: 150ms;
transition-opacity: 150ms;

/* Duraciones Framer Motion */
duration: 0.2s (entrada/salida)
duration: 0.15s (hover/focus)
duration: 0.3s (layout changes)

Copy

Apply

🔐 SEGURIDAD Y MEJORES PRÁCTICAS
Validación de Datos
// Validación de formularios
const validateField = (value: string, type: 'email' | 'password' | 'number') => {
  switch (type) {
    case 'email':
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
    case 'password':
      return value.length >= 8;
    case 'number':
      return !isNaN(Number(value)) && Number(value) > 0;
    default:
      return value.trim().length > 0;
  }
};

Copy

Apply

Sanitización de Entrada
// Limpieza de datos antes de envío
const sanitizeInput = (input: string): string => {
  return input
    .trim()
    .replace(/[<>]/g, '') // Remover caracteres peligrosos
    .substring(0, 255);   // Limitar longitud
};

Copy

Apply

Manejo de Errores
// Patrón estándar para manejo de errores
try {
  const result = await apiCall();
  showSuccess("Operación exitosa");
  return result;
} catch (error) {
  console.error("Error en operación:", error);
  showError("Error", error.message || "Ocurrió un error inesperado");
  throw error;
}

Copy

Apply

📊 ESTRUCTURA DE DATOS COMPLETA
Estados de Componentes
// Estado estándar para componentes con datos
interface ComponentState<T> {
  data: T[];
  loading: boolean;
  error: string | null;
  isRefreshing: boolean;
  lastUpdate: Date | null;
  selectedItem: T | null;
  filters: Record<string, any>;
  pagination: {
    page: number;
    limit: number;
    total: number;
  };
}

Copy

Apply

Configuración de Formularios
// Configuración estándar para formularios
interface FormConfig {
  fields: FormField[];
  validation: ValidationRules;
  submitText: string;
  cancelText: string;
  isLoading: boolean;
  onSubmit: (data: any) => Promise<void>;
  onCancel: () => void;
}

interface FormField {
  name: string;
  label: string;
  type: 'text' | 'number' | 'email' | 'password' | 'select' | 'textarea';
  required: boolean;
  placeholder?: string;
  options?: { value: string; label: string }[];
  validation?: (value: any) => string | null;
}

Copy

Apply

🚀 ROADMAP DETALLADO
Fase 1: Completar Funcionalidades Core (Semana 1-2)
Integración completa con APIs de control
Middleware de autenticación
Reorganización con route groups
Tests básicos para hooks principales
Fase 2: Páginas Adicionales (Semana 3-4)
Página Manual Control
Página Cycle Control
Página Graph con gráficos interactivos
Página Data con tablas avanzadas
Fase 3: Mejoras UX/UI (Semana 5-6)
Sistema de filtros avanzados
Exportación de datos (Excel/PDF)
Drag & Drop para reordenar
Búsqueda global
Fase 4: Optimización y PWA (Semana 7-8)
Configuración PWA
Service Workers
Optimizaciones de performance
Tests de integración
Fase 5: Documentación y Deploy (Semana 9-10)
Documentación técnica completa
Guía de usuario
Configuración de CI/CD
Deploy a producción
📞 INFORMACIÓN DE CONTACTO Y RECURSOS
APIs de Producción
API Principal: http://161.132.206.104:9010
API Control: http://161.132.53.51:9050
Estado: Activas y funcionando
Documentación: Disponible en endpoints
Recursos de Desarrollo
Framework: Next.js 15.1.3
Documentación: https://nextjs.org/docs
Tailwind CSS: https://tailwindcss.com/docs
Framer Motion: https://www.framer.com/motion/
Lucide Icons: https://lucide.dev/
Herramientas de Monitoreo
Desarrollo: Next.js DevTools
Performance: Lighthouse
Errores: Browser DevTools Console
Network: Network tab para APIs
📝 NOTAS FINALES
Arquitectura Establecida
Este proyecto representa un estándar de desarrollo establecido para futuros proyectos. La arquitectura modular, los patrones de hooks personalizados, y la estructura de componentes están diseñados para ser reutilizables y escalables.

Sistemas Base Implementados
✅ Autenticación segura con bcrypt y almacenamiento encriptado
✅ Sistema de temas completo con detección automática
✅ Navegación dinámica con sidebar animado
✅ Notificaciones con toast system completo
✅ Modales para confirmaciones y guardado
✅ Formularios con validación robusta
Próximos Pasos Inmediatos
Integrar APIs de control automático con endpoints reales
Implementar middleware de autenticación para proteger rutas
Crear páginas de Manual Control y Cycle Control
Optimizar performance con lazy loading y code splitting
Mantenimiento y Evolución
Código limpio: Máximo 200 líneas por archivo
Tipado estricto: TypeScript en todo el proyecto
Documentación: Comentarios JSDoc para funciones complejas
Testing: Implementar tests unitarios progresivamente
Performance: Monitoreo continuo de métricas Core Web Vitals
Última actualización: Enero 2025
Estado del proyecto: En desarrollo activo
Próximo milestone: Integración completa con APIs de control
Desarrollador: Asistente de desarrollo especializado en Next.js/TypeScript
Repositorio: github.com/JOGLDEVELOPER96/Standar

🎯 RESUMEN EJECUTIVO
ZGROUP - LinkControl es una aplicación web moderna para el monitoreo y control automático de contenedores refrigerados. Construida con Next.js 15, TypeScript y Tailwind CSS, implementa un sistema completo de autenticación, dashboard en tiempo real, y formularios avanzados para control de temperatura.

Funcionalidades principales implementadas:

Dashboard con monitoreo en tiempo real
Sistema de control automático (único, cíclico, periódico)